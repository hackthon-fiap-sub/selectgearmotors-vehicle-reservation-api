server:
  port: 9944
  servlet:
    context-path: /api
  error:
    whitelabel:
      enabled: false

spring:
  application:
    name: selectgearmotors-company-api
  main:
    allow-circular-references: true

---
spring:
  config:
    activate:
      on-profile: dev
  main:
    allow-circular-references: true
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    connectionTimeout: 30000
    idleTimeout: 30000
    max-open-prepared-statements: 250
    maxLifetime: 2000000
    maximumPoolSize: 5
    minimumIdle: 3
    pool-prepared-statements: true
    poolName: SpringBootHikariCP
    hikari:
      connection-timeout: '60000'
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  mvc:
    pathmatch:
      matching-strategy: "path-pattern-parser"
  flyway:
    baselineOnMigrate: true
    locations: classpath:db/migration, classpath:db/callback
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      sqs:
        listener:
          acknowledge-mode: MANUAL
    region:
      static: us-east-1
aws:
  privacyNotification:
    queueName: ${AWS_SQS_QUEUE_NAME}
    queueUrl: ${AWS_SQS_QUEUE_URL}
    queueArn: ${AWS_SQS_QUEUE_ARN}
api:
  gateway:
    url: ${API_GATEWAY_URL_PRIVACY_NOTIFICATION_STATUS}
swagger:
  api:
    url: https://localhost:9914/api
logging:
  level:
    org:
      springframework:
        web:
          servlet:
            DispatcherServlet: DEBUG
      springdoc: DEBUG
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
management:
  tracing:
    baggage:
      enabled: true
    enabled: true
    propagation:
      type: 'W3C'
    sampling:
      probability: 1.0 # para enviar 100% da amostra'
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_URL} # alterar o endereco do Zipkin'
  #security:
  #  oauth2:
  #    client:
  #      provider:
  #        cognito:
  #          issuer-uri: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_lLiNIC87U
  #      registration:
  #        cognito:
  #          client-id: ${AWS_COGNITO_CLIENT_ID}
  #          client-secret: ${AWS_COGNITO_CLIENT_SECRET}
  #          scope: openid
#application:
#  security:
#    jwt:
#      secret-key: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
#      expiration: 864000000 # 10 day
#      refresh-token:
#        expiration: 6048000000 # 70 days
#cognito:
#  user-pool-id: us-east-1_lLiNIC87U
---
spring:
  application:
    name: selectgearmotors-company-api
  config:
    activate:
      on-profile: prod
  main:
    allow-circular-references: true
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    connectionTimeout: 30000
    idleTimeout: 30000
    max-open-prepared-statements: 250
    maxLifetime: 2000000
    maximumPoolSize: 5
    minimumIdle: 3
    pool-prepared-statements: true
    poolName: SpringBootHikariCP
    hikari:
      connection-timeout: '60000'
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  mvc:
    pathmatch:
      matching-strategy: "path-pattern-parser"
  flyway:
    baselineOnMigrate: true
    locations: classpath:db/migration, classpath:db/callback
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      sqs:
        listener:
          acknowledge-mode: MANUAL
    region:
      static: us-east-1
aws:
  privacyNotification:
    queueName: ${AWS_SQS_QUEUE_NAME}
    queueUrl: ${AWS_SQS_QUEUE_URL}
    queueArn: ${AWS_SQS_QUEUE_ARN}
api:
  gateway:
    url: ${API_GATEWAY_URL_PRIVACY_NOTIFICATION_STATUS}
swagger:
  api:
    url: https://localhost:9914/api
logging:
  level:
    org:
      springframework:
        web:
          servlet:
            DispatcherServlet: DEBUG
      springdoc: DEBUG
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
management:
  tracing:
    baggage:
      enabled: true
    enabled: true
    propagation:
      type: 'W3C'
    sampling:
      probability: 1.0 # para enviar 100% da amostra'
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_URL} # alterar o endereco do Zipkin'
  #security:
  #  oauth2:
  #    client:
  #      provider:
  #        cognito:
  #          issuer-uri: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_lLiNIC87U
  #      registration:
  #        cognito:
  #          client-id: ${AWS_COGNITO_CLIENT_ID}
  #          client-secret: ${AWS_COGNITO_CLIENT_SECRET}
  #          scope: openid
#application:
#  security:
#    jwt:
#      secret-key: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
#      expiration: 864000000 # 10 day
#      refresh-token:
#        expiration: 6048000000 # 70 days
#cognito:
#  user-pool-id: us-east-1_lLiNIC87U